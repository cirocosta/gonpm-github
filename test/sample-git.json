{"_id":"flux","_rev":"7-e6c2931bddf6061ca3eecebd0aeaa8dc","name":"flux","description":"Easily find and acquire torrents from public torrent sites.","dist-tags":{"latest":"1.0.2"},"versions":{"1.0.0":{"author":{"name":"ProjectMoon"},"name":"flux","description":"Easily find and acquire torrents from public torrent sites.","tags":["torrent","torrents","bittorrent"],"version":"1.0.0","homepage":"https://github.com/ProjectMoon/flux","repository":{"type":"git","url":"git://github.com/ProjectMoon/node-torrents.git"},"main":"lib/flux.js","engines":{"node":">=v0.4.0"},"dependencies":{"jsdom":"","htmlparser":"","async":""},"devDependencies":{"vows":""},"_npmJsonOpts":{"file":"/home/jeff/.npm/flux/1.0.0/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"flux@1.0.0","_engineSupported":true,"_npmVersion":"1.0.13","_nodeVersion":"v0.5.4","_defaultsLoaded":true,"dist":{"shasum":"26da8d6168a63ab20425e496328a2d9eab642bc8","tarball":"http://registry.npmjs.org/flux/-/flux-1.0.0.tgz"},"scripts":{},"maintainers":[{"name":"projectmoon","email":"rei@thermetics.net"}],"directories":{}},"1.0.1":{"author":{"name":"ProjectMoon"},"name":"flux","description":"Easily find and acquire torrents from public torrent sites.","tags":["torrent","torrents","bittorrent"],"version":"1.0.1","homepage":"https://github.com/ProjectMoon/flux","repository":{"type":"git","url":"git://github.com/ProjectMoon/flux.git"},"main":"lib/flux.js","engines":{"node":">=v0.4.0"},"dependencies":{"jsdom":"","htmlparser":"","async":""},"devDependencies":{"vows":""},"_npmUser":{"name":"projectmoon","email":"rei@thermetics.net"},"_id":"flux@1.0.1","_engineSupported":true,"_npmVersion":"1.0.103","_nodeVersion":"v0.5.4","_defaultsLoaded":true,"dist":{"shasum":"fb2a1ba4a1cab0512bbb08b99d3b6a5b93f5dcdb","tarball":"http://registry.npmjs.org/flux/-/flux-1.0.1.tgz"},"maintainers":[{"name":"projectmoon","email":"rei@thermetics.net"}],"directories":{}},"1.0.2":{"author":{"name":"ProjectMoon"},"name":"flux","description":"Easily find and acquire torrents from public torrent sites.","tags":["torrent","torrents","bittorrent"],"version":"1.0.2","homepage":"https://github.com/ProjectMoon/flux","repository":{"type":"git","url":"git://github.com/ProjectMoon/flux.git"},"main":"lib/flux.js","engines":{"node":">=v0.4.0"},"dependencies":{"jsdom":"0.6.5","htmlparser":"","async":""},"devDependencies":{"vows":""},"readme":"flux\u000a====\u000aFlux is an easy way to find and acquire public torrent files using Node.\u000aThis module provides fancy, programmatic access to the following public\u000atorrent sites:\u000a\u000a* torrentz.eu: torrent metasearch engine.\u000a* VODO: free, legal, high quality movies and shows.\u000a\u000aInstallation\u000a------------\u000aThe easiest way to install flux is through npm:\u000a\u000a    npm install flux\u000a    \u000aThis will drop it into the current `node_modules` directory and make it\u000aavailable to Node.\u000a\u000aFlux can also be installed manually by checking out the git repository\u000aand copying the `lib` directory to the desired destination and `require`\u000aing the full path.\u000a\u000aTests\u000a-----\u000aflux uses vows for unit testing:\u000a\u000a    vows -i test/*\u000a    \u000aNote: running with -i is required or else the tests won't work correctly.\u000a\u000aBasic Usage\u000a-----------\u000aIf the goal is to just get a torrent file, the `acquire` function will\u000aautomatically find a torrent and download it. It will take the top\u000aresult and download from the first available source, and then save it\u000ato the current directory:\u000a\u000a```javascript\u000avar flux = require('flux');\u000a\u000aflux.acquire('ubuntu 11.04', function(err) {\u000a    if (err) {\u000a        console.log('there was an error: ' + err.message);\u000a    }\u000a    else {\u000a        console.log('ubuntu torrent downloaded!');\u000a    }\u000a});\u000a```\u000a\u000aAdvanced Usage\u000a--------------\u000aFlux is very straightforward. It exposes a very simple, fully async API.\u000aBelow is a guide to the more advanced usage of flux. \u000a\u000aIn order to use flux, you must `require` it:\u000a```javascript\u000avar flux = require('flux');\u000a```\u000a\u000a### Finding Torrent Files ###\u000aUse of flux begins with finding torrents to download. The `search` and\u000a`find` functions are exposed for this purpose. `search` performs a full\u000asearch against all provders, while `find` will return the top result for\u000aeach provider:\u000a\u000a```javascript\u000avar flux = require('flux');\u000a\u000a//returns a list of torrents from all configured providers. this can be\u000a//very large.\u000aflux.search('ubuntu 11.04', function(err, torrents) {\u000a    for (var c = 0; c < torrents.length; c++) {\u000a        console.log(torrents[c]);\u000a    }\u000a});\u000a\u000a//returns a list of the top results from each provider. each provider\u000a//will have one entry in the list (one top result per provider).\u000aflux.find('zenith', function(err, torrents) {\u000a    console.log(torrents);\u000a});\u000a```\u000a\u000aA `torrent` is an object that describes a result from a provider. This\u000aresult from the `find` call for 'zenith' is a list with a single entry.\u000aThis entry is a result for Zenith, a free movie on VODO\u000a( http://www.vodo.net/zenith ):\u000a\u000a```javascript\u000a{ title: 'Zenith Part 1 2011 720p x264 VODO',\u000a  torrentInfo: \u000a   { size: '1152 Mb',\u000a     seeds: '3,301',\u000a     peers: '98',\u000a     hash: '1112d9e509d6fcd93d9c6be45f70994a93d4dc32' },\u000a  provider: 'Torrentz',\u000a  category: 'Movies',\u000a  contentInfo: \u000a   { isHD: true,\u000a     quality: '720p',\u000a     codec: 'H.264',\u000a     digitalMedium: 'Unknown',\u000a     originalMedium: 'Unknown' } }\u000a```\u000a\u000aThe `torrentInfo` object describes the torrent file with information\u000agleaned from the website. Note that not all information might be\u000aavailable for a given torrent. It depends on what information the\u000aprovider exposes.\u000a\u000aThe `contentInfo` object will change based on what information is in the\u000asearch result. Currently, the following types of content are supported:\u000a\u000a* Movies\u000a* Audio (music, soundtracks)\u000a\u000aSupport for the following is planned:\u000a\u000a* Software\u000a* TV Shows\u000a\u000a### Locating Torrents ###\u000aAfter having found torrent files to download, flux must be pointed to\u000aone or more sources in order to actually download the file. There are\u000atwo API calls for this: `locate` and `source`. They following the above\u000apattern: `locate` will find all possible sources for a torrent and\u000a`source` will find a specific source, if it's available.\u000a\u000aIf your goal is to download a torrent, this step is optional. The fetch\u000afunction will call `locate` internally if it is given a torrent search\u000aresult (see below). If you need control over the download source, this\u000astep is required.\u000a\u000a\u000a```javascript\u000a//returns an associative array of source name -> source\u000aflux.locate(torrent, function(err, sources) {\u000a    console.log(sources);\u000a});\u000a\u000a//returns just a single source object.\u000aflux.source('torlock.com', torrent, function(err, source) {\u000a    console.log(source);\u000a});\u000a```\u000a\u000aA `source` is an object of the following structure:\u000a\u000a```javascript\u000a{ name: 'sometorrentsite.com',\u000a     href: 'http://www.sometorrentsite.com/torrent/abcd' }\u000a```\u000a\u000aNote: the `href` property of a source is not necessarily a direct\u000adownload link!\u000a\u000aThe `locate` method returns an associative array with torrent hashes as\u000athe keys. Each entry in this associative array is itself an associative\u000aarray, describing all of the sources for that particular torrent.\u000a\u000aThe `source` method always returns a single source object.\u000a\u000a`source` and `locate` can take a single torrent result or a list of \u000aresults. The returned set of sources will be compiled for all passed in\u000aresults.\u000a\u000a### Downloading Torrents ###\u000aThe final step to getting a torrent file is to download it. The single\u000a`fetch` API call is provided for this:\u000a\u000a```javascript\u000a//fetch a torrent from first available source\u000aflux.fetch(torrent, 'mytorrent.torrent', function(err) {\u000a    //err will be null if successful.\u000a});\u000a\u000a//or fetch from a source directly\u000aflux.fetch(source, 'mytorrent.torrent', function(err) {\u000a    //...\u000a});\u000a```\u000a\u000aThe torrent file is saved to the current working directory by default.\u000aThis can be changed via configuration (see below). If the download was\u000asuccessful, the err parameter of the callback will null.\u000a\u000aConfiguration\u000a-------------\u000aflux exposes some simple configuration properties. The default config is\u000abelow:\u000a\u000a```javascript\u000a{\u000a    saveDir: '.',\u000a    ignoredSources: [],\u000a    verbose: false,\u000a    providers: [ flux.torrentz ]\u000a}\u000a```\u000a\u000aThe save directory (`saveDir`) is where all torrent files will be saved\u000aafter being downloaded. `ignoredSources` will remove various torrent\u000asites from the list of sources to download from. Setting `verbose` to\u000atrue will enable the logging functionality. Configuration is modified by\u000acalling `flux.configure`:\u000a\u000a```javascript\u000aflux.configure({\u000a    saveDir: './torrents',\u000a    ignoredSources: [ '1337x.org' ],\u000a    verbose: true,\u000a    providers: [ flux.vodo, flux.torrentz ]\u000a});\u000a```\u000a\u000a#### Providers ####\u000aThe following providers currently exist:\u000a\u000a* `flux.torrentz`: Programmatic access to the torrentz.eu search engine\u000a  and the many torrent sites it indexes. Not all sources are implemented\u000a  for torrentz yet, but enough should be implemented to download almost\u000a  any torrent indexed by the site.\u000a* `flux.vodo`: Programmatic access to VODO films. The provider has one\u000a  source (itself). Provides access to all of VODO's feature films and\u000a  TV shows. Does not search the \"non-promoted\" videos. Not enabled by\u000a  default.\u000a\u000aCustom Providers\u000a----------------\u000aCustom providers can be coded in order to search any given content source\u000a(website, file, etc). Every provider must be a module that exports the\u000afollowing properties and methods:\u000a\u000a* `name`: The name of this provider (string).\u000a* `owns(torrent)`: True if this torrent object is owned by the provider. Check\u000a  against `torrent.provider` property.\u000a* `search(text, callback)`: Given a query, returns a list of relevant results.\u000a  The objects in the list must be torrent objects as described under \"Finding\u000a  Torrent Files\". Asynchronous.\u000a* `find(text, callback)`: Given a query, returns the top result as a torrent\u000a   object. Asynchronous.\u000a* `locate(torrent, callback)`: Given a torrent object, locates download sources\u000a   for that torrent. Returned result must be a object with a single entry (key\u000a   being the hash of the torrent). The value of this property is itself an object\u000a   where each property key is a source name, and the value is { name, href }.\u000a   `name` is the source name, and `href` is the torrent download link.\u000a* `source(sourceName, torrent, callback)`: Given a source name and torrent\u000a  object, locates and creates the corresponding source object. Result must be\u000a  a Location object. Asynchronous.\u000a   \u000aWhen the provider is complete, it can be passed into `flux.configure` as a\u000aprovider like any built-in provider.\u000a\u000aIt may also be required to create a custom downloader for the provider, for example if\u000athe site does not provide direct torrent download links as a source. Currently the \u000adownloaders are contained in the downloaders.js file and that file would require an\u000aupdate if a custom downloader is needed. The next version will have more modular downloader\u000adefinitions.\u000a\u000aDisclaimers\u000a-----------\u000aThis software is not affiliated with any provider or site it connects\u000ato in any way. It isn't owned by those websites, and its developers have\u000ano connection to the sites. All data and information comes from\u000atorrentz.eu, vodo.net, or other domains; this software simply gives\u000aprogrammatic access to these websites.\u000a","readmeFilename":"README.md","bugs":{"url":"https://github.com/ProjectMoon/flux/issues"},"_id":"flux@1.0.2","dist":{"shasum":"0907be76c745256c8e0f1bb367a400704ff14960","tarball":"http://registry.npmjs.org/flux/-/flux-1.0.2.tgz"},"_from":".","_npmVersion":"1.3.8","_npmUser":{"name":"projectmoon","email":"guy@place.com"},"maintainers":[{"name":"projectmoon","email":"rei@thermetics.net"}],"directories":{}}},"maintainers":[{"name":"projectmoon","email":"rei@thermetics.net"}],"time":{"modified":"2013-09-14T21:08:36.726Z","created":"2011-09-03T15:44:48.836Z","1.0.0":"2011-09-03T15:44:49.062Z","1.0.1":"2011-10-31T14:09:56.595Z","1.0.2":"2013-09-14T21:08:36.726Z"},"author":{"name":"ProjectMoon"},"repository":{"type":"git","url":"git://github.com/ProjectMoon/flux.git"},"_attachments":{}}
